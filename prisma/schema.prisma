datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  role          UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // relasi articel
  articles      Article[]      @relation("AuthorArticles")
  uploadedMedia MediaAsset[] 
 
  passwordResetTokens PasswordResetToken[]   // reset passw relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   // simpan hash dari raw token
  expiresAt DateTime
  usedAt    DateTime?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


// ---------- CATEGORY ----------
// model Category {
//   id        String      @id @default(cuid())
//   name      String      @unique
//   slug      String      @unique
//   articles  Article[]   @relation("CategoryArticles")
// }



// ---------- TAG ----------
// model Tag {
//   id        String      @id @default(cuid())
//   name      String      @unique
//   slug      String      @unique
//   articles  ArticleTag[]
// }

// model ArticleTag {
//   articleId String
//   tagId     String

//   article   Article @relation(fields: [articleId], references: [id],  onDelete: Cascade)
//   tag       Tag     @relation(fields: [tagId], references: [id])

//   @@id([articleId, tagId])
// }

// ---------- MEDIA ASSET ----------
model MediaAsset {
  id            String    @id @default(cuid())
  title         String?
  caption       String?
  url           String
  public_id     String?
  secure_url    String?
  thumbnail_url String?
  resource_type String
  format        String?
  width         Int?
  height        Int?
  uploadedBy    String
  uploadedAt    DateTime  @default(now())

  uploader    User      @relation(fields: [uploadedBy], references: [id])
  usages      ArticleMedia[]
}

model ArticleMedia {
  articleId    String
  mediaAssetId String
  role         String 
  article      Article     @relation(fields: [articleId], references: [id])
  mediaAsset   MediaAsset  @relation(fields: [mediaAssetId], references: [id], onDelete: Cascade)

  @@id([articleId, mediaAssetId, role])
}

// ---------- ARTICLE / POSTINGAN BERITA ----------
model Article {
  id            String          @id @default(cuid())
  title         String
  slug          String          @unique
  summary       String?
  content       String          // HTML / Markdown
  status        ArticleStatus   @default(DRAFT)
  authorId      String
  // categoryId    String
  publishedAt   DateTime?
  wordCount     Int?
  viewCount     Int             @default(0)

  author        User            @relation("AuthorArticles", fields: [authorId], references: [id])
  // category      Category        @relation("CategoryArticles", fields: [categoryId], references: [id])
  // tags          ArticleTag[]
  media         ArticleMedia[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?

   @@index([deletedAt]) 
}


enum UserRole {
    ADMIN
    EDITOR
    USER
}


enum ArticleStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}